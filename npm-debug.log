0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'publish' ]
2 info using npm@3.10.10
3 info using node@v6.11.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/gofrendi/chimera-framework',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/gofrendi/.npm/chimera-framework/0.0.31/package.tgz not in flight; packing
9 verbose correctMkdir /home/gofrendi/.npm correctMkdir not in flight; initializing
10 info lifecycle chimera-framework@0.0.31~prepublish: chimera-framework@0.0.31
11 silly lifecycle chimera-framework@0.0.31~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/gofrendi/.npm/chimera-framework/0.0.31/package.tgz',
12 verbose tar pack   '/home/gofrendi/chimera-framework' ]
13 verbose tarball /home/gofrendi/.npm/chimera-framework/0.0.31/package.tgz
14 verbose folder /home/gofrendi/chimera-framework
15 verbose addLocalTarball adding from inside cache /home/gofrendi/.npm/chimera-framework/0.0.31/package.tgz
16 verbose correctMkdir /home/gofrendi/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd chimera-framework@0.0.31
18 verbose afterAdd /home/gofrendi/.npm/chimera-framework/0.0.31/package/package.json not in flight; writing
19 verbose correctMkdir /home/gofrendi/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/gofrendi/.npm/chimera-framework/0.0.31/package/package.json written
21 silly publish { name: 'chimera-framework',
21 silly publish   version: '0.0.31',
21 silly publish   description: 'Chimera-framework is a nodejs based framework that let you write any task in any language, and combine them for a greater good.',
21 silly publish   bin:
21 silly publish    { chimera: 'core.js',
21 silly publish      'chimera-serve': 'server.js',
21 silly publish      'chimera-send': 'sender.js',
21 silly publish      'chimera-eisn': 'eisn.js',
21 silly publish      'chimera-init-web': 'generateProject.js' },
21 silly publish   scripts: { test: 'node test.js', start: 'node server.js' },
21 silly publish   keywords: [ 'framework', 'chain', 'multiple-programming-language' ],
21 silly publish   author: { name: 'goFrendi' },
21 silly publish   license: 'ISC',
21 silly publish   dependencies:
21 silly publish    { assert: '^1.4.1',
21 silly publish      async: '^2.4.1',
21 silly publish      'body-parser': '^1.17.2',
21 silly publish      'circular-json': '^0.3.3',
21 silly publish      express: '^4.15.4',
21 silly publish      'fs-extra': '^4.0.1',
21 silly publish      http: '0.0.0',
21 silly publish      'js-yaml': '^3.9.1',
21 silly publish      'json-stringify-safe': '^5.0.1',
21 silly publish      'node-cmd': '^3.0.0',
21 silly publish      path: '^0.12.7',
21 silly publish      process: '^0.11.10',
21 silly publish      querystring: '^0.2.0' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git://github.com/goFrendiAsgard/chimera.git' },
21 silly publish   bugs: { url: 'https://github.com/goFrendiAsgard/chimera/issues' },
21 silly publish   homepage: 'https://github.com/goFrendiAsgard/chimera#readme',
21 silly publish   main: 'index.js',
21 silly publish   directories: { test: 'tests' },
21 silly publish   devDependencies: {},
21 silly publish   readme: '# Chimera Framework\n\nChimera-framework is a nodejs based framework that let you write any task in any language, and combine them for a greater good.\n\n# Motivation\n\n* Most (if not all) programming languages support command line interface\n\n    Perl, python, php, ruby, haskell, javascript, c, java, pascal, R, and even matlab (See http://stackoverflow.com/questions/6657005/matlab-running-an-m-file-from-command-line) are supporting command line interface (CLI). Through CLI, different programs can communicate to each others. Chimera-framework provide mechanism to store global variables and to orchastrate the programs into a single flow.\n\n* Some programming languages are better at some cases while other are excelled at other cases\n\n    You might love PHP from the bottom of your heart, but it doesn\'t change the fact that doing heavy-statistic computation in R is easier. Rather than trying to make PHP do what R do, it is more easier to just use R instead.\n\n* Atomic process\n\n    Unix has a great philosophy. It encourage programmers to build a single program to do a single task. Nowadays, people try to make one thing to rule out everything. This might sounds good at first, but the effort will be futile. It is better to keep everything simple and combine those simple process to achieve a greater good.\n\n* Scalability\n\n    By creating independent simple programs, you can make a lot of possibility. There is a hero in DOTA named Invoker that can combine his orbs to activate 10 different abilities (http://dota2.gamepedia.com/Invoker#Invoked_abilities). Rather than building a monolithic program that won\'t scale, it is better to make simple programs, and combine them as you need.\n\n* Less language migration\n\n    Sometime you need a certain feature that is only available in an esoteric-new-programming-language. You learn the language, convert all your old projects into this new language, and loosing the meaning of life. Just never do that anymore. Chimera framework goal is to let you write any task in any language, and combine them to achieve a greater good.\n\n\n# Installation\n\n* From source (require `git`)\n\n```sh\ngit clone git@github.com:goFrendiAsgard/chimera.git\nnpm install\nnpm link\n```\n* Using npm\n\n```sh\nnpm install --global chimera-framework\n```\n\n# Prerequisites\n\n* nodejs\n* npm\n* any programming languages you want to use\n\n# Is it working?\n\nYou can run the test case by running `npm test`. The test require `python`, `php`, and `java` to be already installed.\n\n# Usage (command line)\n\n## Using Chain File\n\nBasically you can invoke your Chain file by using this command:\n\n```sh\nchimera your-chain-file.yaml [input1 [input2 [input3 ...]]]\n```\n\nIn the next section you will see how to write a YAML-chain file\n\n__Note:__ JSON Format will also works\n\n### Single process\n\nA chain should contains at least three components. Inputs, command, and output.\nFor single process, the YAML syntax is quite straight-forward.\n\n```yaml\n# filename: add.yaml\nins: a, b\nout: c\ncommand: node add.js\n```\n\nYou can invoke the chain by performing `chimera add.yaml 5 6`. Assuming you `add.js` works correctly, you should see `11` as result.\nIf you don\'t define `out` element, `_ans` will be used by default.\n\nChimera also provide some syntactic sugar for your convenience. The above example can also be written as:\n\n\n```yaml\n# Now, we put ins and out into the command, separated by ->\n# The format is: [input] -> [process] -> output\ncommand: (a,b) -> node add.js -> c\n```\n\nif not specified, the out parameter is default to `_ans`\n\n```yaml\nins: a, b\ncommand: node add.js\n```\n\nYou can even write this:\n```yaml\ncommand: (a, b) -> node add.js\n```\n\nor even this:\n\n```yaml\n(a, b) -> node add.js\n```\n\nIn some situation, your process might be so simple that you only need a single line javascript arrow function instead of a fully stand alone program. In that case, you can do this:\n\n```yaml\n(a, b) -> (x,y)=>{return parseFloat(x)+parseFloat(y)}\n```\n\nFor more comprehensive information regarding anonymous javascript arrow function, please visit (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n### Process control (branch and loop)\n\nSometime your process contains several simple logic (i.e: loop and branch). Please look at this example:\n\n```yaml\n# control.yaml\nvars : \n    delta : 1\nins : a\nout : a\nseries :\n  # First process\n  - if : a < 10\n    command : (a, delta) -> node programs/add.js -> a\n    while : a < 8\n  # Second process\n  - if : a > 10\n    command : (a, delta) -> node programs/substract.js -> a\n```\n\nIn the example, we create a global variable named `delta`. The value is `1`. It can be changed later by the processes. But, for this example, we won\'t do any changes to `delta`\'s value. Instead, we will change the value of `a`\n\nWe have two proceesses that run sequentially (you can also use `parallel` instead of `series`, it will be discussed in the next section).\n\nThe first process (`(a, delta) -> node programs/add.js -> a`) take `a` and `delta` as inputs. The output will then saved in global variable `a`, so that it can be used later. Chimera will execute this process only if `a < 10`. The process will then executed repeatedly while `a < 8`\n\nOnce the first process completed (or ignored in case of the initial condition doesn\'t met), the second process (`(a, delta) -> node programs/substract.js -> a`) will be executed. The second process will only be executed if `a > 10`.\n\nThe process above is logically equal to this pseudo-code (well, actually this is Python):\n\n```python\ndelta = 1\na = input()\n\n# First process\nif a < 10:\n    # Well, it is actually do-while,\n    # Python just strangely doesn\'t have do-while\n    # so here we go...\n    while True:\n        a = read_output_of(\'node programs/add.js \' + a + \' \' + delta)\n        if not (a<8):\n            break\n\n# Second process\nif a > 10:\n    a = read_output_of(\'node programs/substract.js \' + a + \' \' + delta)\n\n# now, show the output\nprint a\n```\n\n__Note:__ Use this feature with care. Don\'t over do it. For a more complex logic-control, please put it on your program.\n\n### Parallel execution\n\nLet\'s consider you have several programs written in Python, Java, PHP, and Javascript. Each of them takes 2 arguments, do simple arithmetic operation, and return a single output. Given `a` and `b`, you want to calculate `((a+b) * (a-b)) + a`.\n\nYou can write the process as follow:\n\n```\nf = ((a+b) * (a-b)) + a\n```\n\nYou can then divide this process into several sub-processes:\n```\nProcess 1: c = a + b\nProcess 2: d = a - b\nProcess 3: e = c * d\nProcess 4: f = e + a\n```\n\nProcess 1 and process 2 will be executed in parallel since they are independent to each other. You don\'t need to solve process 1 in order to do process 2 and vice versa.\n\nAfter Process 1 and process 2 finished, process 3 and process 4 should be executed in serial.\nProcess 3 depend on both process 1 and 2, and process 4 depend on process 3\n\n\n```yaml\n# chain-minimal.yaml\nins: a,b\nout: f\nverbose: false\nseries:\n  # Process One & Two\n  - parallel:\n      # Process 1 (Python)\n      - a, b -> python programs/add.py -> c\n      # Process 2 (Java, thus needs compilation)\n      - series:\n          - chimera-eisn Substract.java Substract.class javac programs/Substract.java\n          - a, b -> java -cp programs Substract -> d\n  # Process 3 (PHP)\n  - c, d -> php programs/multiply.php -> e\n  # Process 4 (Javascript)\n  - e, a ->node programs/add.js -> f\n```\nYou can execute the chain by invoking: \n\n```sh\nchimera chain-minimal.yaml 5 1\n``` \n\nThis will give you `29` since  `((5+1) * (5-1)) + 5 = 29`\n\n__Verbosity:__ Chimera also allows you to see the whole process log. This is useful for benchmarking.\nTo see the process log, you need to change `verbose: false` into `verbose: true`. If the key is not exists, you can add it.\n\nBelow is the log example of previous process in order to let you see if the process is really parallel\n\n```sh\ngofrendi@minastirith:~/chimera$ chimera tests/chain-minimal.yaml 5 1\n[INFO] START PROCESS [python programs/add.py "5" "1"] AT    : 57,267,581,140,268\n[INFO] START PROCESS [chimera-eisn Substract.java Substract.class javac programs/Substract.java] AT    : 57,267,600,777,741\n[INFO] END PROCESS   [python programs/add.py "5" "1"] AT    : 57,267,621,802,911\n[INFO] PROCESS       [python programs/add.py "5" "1"] TAKES : 40,613,652 NS\n[INFO] STATE AFTER   [python programs/add.py "5" "1"]       : {"a":5,"b":1,"c":6}\n[INFO] END PROCESS   [chimera-eisn Substract.java Substract.class javac programs/Substract.java] AT    : 57,267,702,087,331\n[INFO] PROCESS       [chimera-eisn Substract.java Substract.class javac programs/Substract.java] TAKES : 101,288,225 NS\n[INFO] STATE AFTER   [chimera-eisn Substract.java Substract.class javac programs/Substract.java]       : {"a":5,"b":1,"c":6,"_ans":""}\n[INFO] START PROCESS [java -cp programs Substract "5" "1"] AT    : 57,267,703,642,875\n[INFO] END PROCESS   [java -cp programs Substract "5" "1"] AT    : 57,267,817,048,351\n[INFO] PROCESS       [java -cp programs Substract "5" "1"] TAKES : 113,360,360 NS\n[INFO] STATE AFTER   [java -cp programs Substract "5" "1"]       : {"a":5,"b":1,"c":6,"_ans":"","d":4}\n[INFO] START PROCESS [php programs/multiply.php "6" "4"] AT    : 57,267,818,154,108\n[INFO] END PROCESS   [php programs/multiply.php "6" "4"] AT    : 57,267,857,071,186\n[INFO] PROCESS       [php programs/multiply.php "6" "4"] TAKES : 38,877,463 NS\n[INFO] STATE AFTER   [php programs/multiply.php "6" "4"]       : {"a":5,"b":1,"c":6,"_ans":"","d":4,"e":24}\n[INFO] START PROCESS [node programs/add.js "24" "5"] AT    : 57,267,857,806,195\n[INFO] END PROCESS   [node programs/add.js "24" "5"] AT    : 57,267,948,281,977\n[INFO] PROCESS       [node programs/add.js "24" "5"] TAKES : 90,429,904 NS\n[INFO] STATE AFTER   [node programs/add.js "24" "5"]       : {"a":5,"b":1,"c":6,"_ans":"","d":4,"e":24,"f":29}\n29\n```\n\nAs you see, the second process (`[chimera-eisn Substract.java Substract.class javac programs/Substract.java]`) had been started without waiting the first process (`[python programs/add.py "5" "1"]`) finished.\n\n`chimera-eisn` is a tool to execute a command (the third parameter) only if the source file (first parameter) modification time is newer than the destination file (second parameter) modification time\n\n### Nested variables\n\nThe best and worst part of Javascript object is that you can add any key without any need to define structure. Chimera\'s global variable is actually a big javascript object.\n\nSuppose you have variable `a`, you can then access `a.name`, `a.address` etc.\n\nThe following YAML file show you how a nested variable can be used.\n\n```yaml\nins: a, b\nout: c\nvars:\n    tmp: \n        x: 3\n        z: 5\nverbose: false\nseries:\n    - echo "{\\"x\\":4, \\"y\\":{}}" -> tmp\n    - parallel:\n        - series: \n            - (a, b) -> node programs/add.js -> tmp.y.addResult\n            - (tmp.y.addResult, tmp.x) -> php programs/multiply.php -> tmp.y.addResult\n        - series:\n            - (a, b) -> node programs/substract.js -> tmp.y.substractResult\n            - (tmp.y.substractResult, tmp.x) -> php programs/multiply.php -> tmp.y.substractResult\n    - (tmp.y.addResult, tmp.y.substractResult) -> php programs/multiply.php -> c\n```\nPlease observe each state of the program\n\n```sh\ngofrendi@minastirith:~/chimera$ chimera tests/chain-complex-vars.yaml 10 11\n[INFO] START PROCESS [php programs/echo.php "{\\"x\\":4, \\"y\\":{}}"] AT    : 57,939,071,995,102\n[INFO] END PROCESS   [php programs/echo.php "{\\"x\\":4, \\"y\\":{}}"] AT    : 57,939,119,742,255\n[INFO] PROCESS       [php programs/echo.php "{\\"x\\":4, \\"y\\":{}}"] TAKES : 47,689,756 NS\n[INFO] STATE AFTER   [php programs/echo.php "{\\"x\\":4, \\"y\\":{}}"]       : {"tmp":{"x":4,"y":{}},"a":10,"b":11}\n[INFO] START PROCESS [php programs/add.php "10" "11"] AT    : 57,939,122,782,058\n[INFO] START PROCESS [php programs/substract.php "10" "11"] AT    : 57,939,125,628,701\n[INFO] END PROCESS   [php programs/add.php "10" "11"] AT    : 57,939,155,653,704\n[INFO] PROCESS       [php programs/add.php "10" "11"] TAKES : 32,833,697 NS\n[INFO] STATE AFTER   [php programs/add.php "10" "11"]       : {"tmp":{"x":4,"y":{"addResult":21}},"a":10,"b":11}\n[INFO] START PROCESS [php programs/multiply.php "21" "4"] AT    : 57,939,156,339,845\n[INFO] END PROCESS   [php programs/substract.php "10" "11"] AT    : 57,939,158,555,972\n[INFO] PROCESS       [php programs/substract.php "10" "11"] TAKES : 32,884,663 NS\n[INFO] STATE AFTER   [php programs/substract.php "10" "11"]       : {"tmp":{"x":4,"y":{"addResult":21,"substractResult":-1}},"a":10,"b":11}\n[INFO] START PROCESS [php programs/multiply.php "-1" "4"] AT    : 57,939,159,097,322\n[INFO] END PROCESS   [php programs/multiply.php "21" "4"] AT    : 57,939,190,612,102\n[INFO] PROCESS       [php programs/multiply.php "21" "4"] TAKES : 34,214,893 NS\n[INFO] STATE AFTER   [php programs/multiply.php "21" "4"]       : {"tmp":{"x":4,"y":{"addResult":84,"substractResult":-1}},"a":10,"b":11}\n[INFO] END PROCESS   [php programs/multiply.php "-1" "4"] AT    : 57,939,192,968,186\n[INFO] PROCESS       [php programs/multiply.php "-1" "4"] TAKES : 33,867,169 NS\n[INFO] STATE AFTER   [php programs/multiply.php "-1" "4"]       : {"tmp":{"x":4,"y":{"addResult":84,"substractResult":-4}},"a":10,"b":11}\n[INFO] START PROCESS [php programs/multiply.php "84" "-4"] AT    : 57,939,193,351,485\n[INFO] END PROCESS   [php programs/multiply.php "84" "-4"] AT    : 57,939,223,041,934\n[INFO] PROCESS       [php programs/multiply.php "84" "-4"] TAKES : 29,685,070 NS\n[INFO] STATE AFTER   [php programs/multiply.php "84" "-4"]       : {"tmp":{"x":4,"y":{"addResult":84,"substractResult":-4}},"a":10,"b":11,"c":-336}\n-336\n```\n\n## Put YAML-chain format as argument \n\nYou can also put your YAML content directly as argument.\n\n```sh\nchimera "command : cal"\n```\nor simply\n\n```sh\nchimera "cal"\n```\nor even\n\n```sh\nchimera "(a) -> cal" 2017\n```\n\nwhich is similar to\n\n```sh\nchimera "cal 2017"\n```\n\n# Usage (programmatically)\n\n```javascript\nconst chimera = require(\'chimera-framework/core\');\n\n// without presets\nchimera.executeChain(\'your-chain\', [5, 1], {}, function(output){\n    console.log(output);\n});\n\n\n// with presets\nchimera.executeChain(\'your-chain\', {}, {a: 5, b: 1}, function(output){\n    console.log(output);\n});\n```\n\nFunction `executeChain` has 4 parameters, `executeChain(yamlFile, inputs, presets, callback)`\n\n* `your-chain` : A string or a file. YAML or JSON format are both valid. \n* `inputs` : Array of inputs\n* `presets` : Initial values of variables\n* `callback` : Callback function. Can has three parameters `output`, `success`, `errorMessage`.\n    - `output` contains output of the chain\n    - `success` contains whether true or false, reflecting whether the chain executed successfully or with error\n    - `errorMessage` contains useful error message for debugging purpose\n\n__Note:__ For convenience, Chimera change the working directory to the YAML-chain path. At the end of callback stack, the working directory will be set back. However some problem might occurred if you run another code before the callback finished. Also, for a very rare condition (i.e: You accidentally execute interactive program that will wait user-input forever), the callback might not be executed at all.\n\n# Web Service\n\nChimera web service will let you run chains in other computer.\n\nTo start a chimera web service, you can run `chimera-serve` in the server.\n\nWhile to use the web service, you can run `chimera-send http://server.com:3000 chain-file.yaml your-first-input your-second-input`.\n\nYou can also define TIMEOUT and PUBLISHED directory when running `chimera-serve`. In Unix, you can do this: `TIMEOUT=5000 PUBLISHED=. chimera-serve` to start the web service that only allows client to access chains in current directory. The maximum execution process should be 5000 ms. Otherwise, a request time out will be returned.\n\nSimilar mechanism also works when you run `chimera-send`. `TIMEOUT=1000 chimera-send tests/chain-minimal.yaml 4 4` will makes the process only waits for maximum 1 second response from server.\n\n# Utilities\n\n* `chimera-serve` : Look at web service section\n* `chimera-send` : Look at web service section\n* `chimera-eisn` : Execute if source newer, example: `chimera-eisn program.java program.class javac program.java`\n\n# Web Framework\n\n## Init Project\n\nRun this command to scaffold a web project:\n\n```sh\nchimera-init-web myApp\n```\n\nThe structure of your web application will be:\n```sh\n▾ myApp/\n  ▸ bin/\n  ▾ chains/\n    ▾ programs/\n        sample.responder.py\n      core.auth.yaml\n      core.configs.yaml\n      core.login.yaml\n      core.logout.yaml\n      core.routes.yaml\n      index.yaml\n  ▸ node_modules/\n  ▾ public/\n    ▸ images/\n    ▸ javascripts/\n    ▸ stylesheets/\n      favicon.ico\n  ▾ views/\n      error.pug\n      index.pug\n      layout.pug\n      sample.respond.pug\n      sample.ejs\n      sample.pug\n    app.js\n    config.yaml\n    package.json\n    route.yaml\n```\n\nTo run the web server, you can simply move to `myApp` directory and run `npm start`\n\n## Configurations (config.yaml)\n* `mongo_url` \nSome core programs are using mongodb.\n\nBy default, the value will be `mongodb://localhost/myApp` (depend on your application name).\n\n* `public_path`\nThe public directory where you put all static resources (javascript, css, images, etc). \n\nBy default, the value will be `public`.\n\n* `favicon_path`\nThe favicon path. \n\nBy default, the value will be `public/favicon.ico`\n\n* `view_path`\nThe directory contains view templates (either pug, ejs, or handlebars). \n\nBy default, the value will be `views`\n\n* `error_template` \nThe error template.\n\nBy default, the value will be `error.pug`\n\n* `session_secret` \nThe session secret.\n\nBy default, the value will be `mySecret`\n\n* `session_max_age`\nSession max age (in seconds).\n\nBy default, the value will be `60000`\n\n* `session_save_unitialized`\n\nIf this is true, the session will be saved and updated in each request\n\nBy default, the value will be `true`\n\n* `session_resave`\n\nBy default, the value will be `true`\n\n* `route_chain` \n\nRoute list chain.\n\nThe output of the chain should be routes in JSON format.\n\nBy default, the value will be `chains/core.routes.yaml`\n\n* `config_chain` \n\nConfig list chain.\n\nThe output of the chain should be configs in JSON format.\n\nBy default, the value will be `chains/core.configs.yaml`\n\n* `auth_chain` \n\nAuthorization chain, require request.\n\nThe output of the chain should be user info in JSON format.\n\nBy default, the value will be `chains/core.auth.yaml`\n\n* `migration_chain` \n\nMigration chain, require config.\n\nThe output of the chain should be migration info in JSON format.\n\nBy default, the value will be `chains/core.migration.yaml`\n\n\n## Current Features (Under development)\nThe already working features:\n* File upload (there but not tested)\n* Cookies & Session (both, retrieving and writing are working)\n* View template (using pug, ejs, and handlebar)\n* Configurations \n\n![demo](doc/web-framework.png)\n\n# Similar projects, inspirations, and how chimera-framework different from them\n\n* Polyglot (https://github.com/sausheong/polyglot)\n\n    In polyglot, single process flow is written in a single programming language. However, you can have a lot of process flows, which each of them can be written in different languages.\n\n    In chimera-framework, singe process can be divided into several sub-processes. Every sub-process can be written in different language.\n\n* Beaker notebook (http://beakernotebook.com/)\n\n    This one is quite similar to chimera-framework. However, the main purpose of beaker is for prototyping and note-taking. In beaker a cell cannot be used in different notebook. You should copy the cell into another notebook in order to use the same piece of code.\n\n* Invoker (http://dota2.gamepedia.com/Invoker)\n\n    A hard-to-master DOTA hero. Not even a framework. Has cool abilities which are combination of 3 orbs.\n\n* Chimera (https://en.wikipedia.org/wiki/Chimera_(mythology))\n\n    Legendary creature. Combination of goat, lion, and snake.\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'ae41147b11b9c8c97e8ed97cbcba668bb12c17cf',
21 silly publish   _id: 'chimera-framework@0.0.31',
21 silly publish   _shasum: 'fccc892d00eb8f1b94fdad424e6ac105dbcb4118',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name chimera-framework
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'chimera-framework',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'chimera-framework',
26 silly mapToRegistry   name: 'chimera-framework',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/chimera-framework
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /home/gofrendi/.npm/chimera-framework/0.0.31/package.tgz
30 verbose request uri https://registry.npmjs.org/chimera-framework
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 4:34:13 PM
33 verbose request using bearer token for auth
34 verbose request id 408fba1260d80954
35 http request PUT https://registry.npmjs.org/chimera-framework
36 http 403 https://registry.npmjs.org/chimera-framework
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '96',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Tue, 22 Aug 2017 09:34:14 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-sin18023-SIN',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1503394453.261819,VS0,VE1093',
37 verbose headers   vary: 'Accept-Encoding, Accept' }
38 verbose request invalidating /home/gofrendi/.npm/registry.npmjs.org/chimera-framework on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 0.0.31." : chimera-framework
40 verbose stack     at makeError (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid chimera-framework
43 verbose cwd /home/gofrendi/chimera-framework
44 error Linux 4.4.0-92-generic
45 error argv "/usr/bin/nodejs" "/usr/bin/npm" "publish"
46 error node v6.11.2
47 error npm  v3.10.10
48 error code E403
49 error "You cannot publish over the previously published version 0.0.31." : chimera-framework
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
