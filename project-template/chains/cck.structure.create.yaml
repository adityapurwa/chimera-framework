# This chain takes 3 inputs:
# - config: JSON, configuration of chimera web framework
# - schema: string, schema name
# - user_id: string, the user id
# There will be no output

ins: webConfig, schema, user_id
out: structure
verbose: true
series:

    # define configuration
    - parallel:
        - (webConfig, "cck.structure", user_id) -> [programs/cck.mongo.core.js createCckConfig] -> structure_config
        - (webConfig, schema.structure.table, user_id) -> [programs/cck.mongo.core.js createCckConfig] -> table_config
        - (schema.structure.table) -> (t)=>{return JSON.stringify({'table':t})} -> query

    - series:
        # try to get structure
        - (structure_config, query) -> [programs/cck.mongo.core.js findOne] -> structure

        - parallel:

            # if structure exists, update it
            - if: "('_id' in structure)"
              series:
                - (structure_config, structure._id, schema.structure) -> [programs/cck.mongo.core.js update] -> update_result
                - if: "update_result.length > 0"
                  command: (update_result.0) ->-> structure


            # if the structure doesn't exist, insert it
            - if: "!('_id' in structure)"
              command: (structure_config, schema.structure, '{}') -> [programs/cck.mongo.core.js insert] -> structure

        # insert data
        - if: "'data' in schema"
          command: (table_config, schema.data, '{}')-> [programs/cck.mongo.core.js insert] -> insert_result
